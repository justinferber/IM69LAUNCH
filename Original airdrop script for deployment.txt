require('dotenv').config();
const fs = require("fs");
const { ethers } = require("ethers");
const InvasionMars = artifacts.require("InvasionMars");

module.exports = async function (deployer, network, accounts) {
  try {
    // Connect to the provider using ethers.js and MetaMask
    const provider = new ethers.providers.Web3Provider(web3.currentProvider);
    const signer = provider.getSigner();

    // Read the CSV file with initial holders and their respective amounts
    const csvPath = "C:/Users/justi/Desktop/IM69LAUNCH/IM69Airdrop.csv";
    const csvData = fs.readFileSync(csvPath, "utf8");

    console.log("Parsed CSV file for airdrop details");

    // Process the CSV data into arrays
    const lines = csvData.split("\n");
    const initialHolders = [];
    const holdings = [];

    const tokenDecimals = 18; // Set the token decimals if it's different from 18

    for (let i = 1; i < lines.length; i++) {
      const line = lines[i];
      if (line.trim() === "") continue; // Skip empty lines

      const [address, amount] = line.split(",");
      initialHolders.push(address);

      // Remove the carriage return character and convert the amount to a BigNumber
      const sanitizedAmount = amount.replace(/\r$/, "");
      console.log("sanitizedAmount:", sanitizedAmount); // Log sanitizedAmount

      if (sanitizedAmount) {
        const integerAmount = ethers.BigNumber.from(sanitizedAmount).mul(ethers.BigNumber.from(10).pow(tokenDecimals));
        console.log("integerAmount:", integerAmount.toString()); // Log integerAmount
        holdings.push(integerAmount.toString());

        console.log(`Processed airdrop detail for address ${address} with amount ${integerAmount.toString()}`);
      } else {
        console.log(`Skipping airdrop detail for address ${address} due to invalid amount`);
      }
    }

    console.log("Processed all airdrop details");

    // Deploy the contract with airdrop details
    console.log("Deploying InvasionMars contract...");
    await deployer.deploy(InvasionMars, initialHolders, holdings);
    const invasionMarsInstance = await InvasionMars.deployed();
    console.log(`InvasionMars contract deployed at: ${invasionMarsInstance.address}`);

    // Mint tokens to the airdrop holders
    for (let i = 0; i < initialHolders.length; i++) {
      const tx = await invasionMarsInstance.transfer(initialHolders[i], holdings[i]);
      await tx.wait(); // Wait for the transaction to be mined
      console.log(`Transferred ${holdings[i]} tokens to address ${initialHolders[i]}`);
    }

    console.log("Token distribution completed");

    // Additional deployment logic for the InvasionMars contract
    const totalSupply = await invasionMarsInstance.totalSupply();
    console.log("Total supply of InvasionMars tokens:", totalSupply.toString());

    // Add any additional logic or actions you want to perform after deployment

  } catch (error) {
    console.error("Error executing deployment script:", error);
  }
};
